---
title: "clustering-code-R"
---

# Libraries

```{r}
library(tidymodels)
library(tidyverse)
library(tidyclust)
library(rio)


```

# Importacion y tratamiento de la data

```{r}
data <- import("marketing_campaign.csv")
```

```{r}
str(data)
```
Exploramos las variables categoricas:
```{r}
data$Education |> n_distinct()
data$Marital_Status |>  n_distinct()
data$Dt_Customer |> n_distinct()

```
```{r}
data$Education |> table()
```

```{r}
data$Marital_Status |> table()
```

```{r}
data$Dt_Customer |> table()
```

Transformamos las variables 

- Calculamos la edad 
```{r}
data <- data |> 
  mutate(Age = 2021 - Year_Birth)
```
- Gasto total
```{r}
data <- data |> 
  mutate(Gasto_total = MntWines + MntFruits + MntMeatProducts + MntFishProducts + MntSweetProducts + MntGoldProds)
```
- Estado civil
```{r}
data <- data |> 
  mutate(estado_civil = case_when(
    Marital_Status %in% c("Married", "Together") ~ "Casado",
    Marital_Status %in% c("Absurd", "Widow", "YOLO", "Divorced", "Single") ~ "Soltero",
    TRUE ~ Marital_Status
  ))
```
- Cantidad de hijos
```{r}
data <- data |> 
  mutate(Cantidad_hijos = Kidhome + Teenhome)
```
- Tamaño de la familia
```{r}
data <- data |> 
  mutate(Tamaño_Familia = case_when(
    estado_civil == "Soltero" ~ 1 + Cantidad_hijos,
    estado_civil == "Casado" ~ 2 + Cantidad_hijos
  ))
```
- Padre de familia
```{r}
data <- data |> 
  mutate(Padre_de_Familia = ifelse(Cantidad_hijos > 0, 1, 0))
```
- Educacion
```{r}
data <- data |> 
  mutate(Educacion = case_when(
    Education %in% c("Basic", "2n Cycle") ~ "básica",
    Education == "Graduation" ~ "Pre_grado",
    Education %in% c("Master", "PhD") ~ "Pos_grado",
    TRUE ~ Education
  ))
```
- Cambio de nombre a columnas de interes
```{r}
data <- data |> 
  rename(
    Vinos = MntWines,
    Frutas = MntFruits,
    Carne = MntMeatProducts,
    Pescado = MntFishProducts,
    Dulces = MntSweetProducts,
    Gold = MntGoldProds,
    Ingreso = Income,
    Niño_en_casa = Kidhome,
    Adolecente_en_casa = Teenhome,
    Dias_ultima_compra = Recency,
    gasto_vinos = MntWines,
    gasto_frutas = MntFruits,
    gasto_carne = MntMeatProducts,
    gasto_pescado = MntFishProducts,
    gasto_dulces = MntSweetProducts,
    gasto_gold = MntGoldProds,
    cantidad_compra_con_descuento = NumDealsPurchases,
    cantidad_compra_web = NumWebPurchases,
    cantidad_compra_catalogo = NumCatalogPurchases,
    cantidad_compra_tienda = NumStorePurchases, 
    cantidad_visitas_web_mes = NumWebVisitsMonth, 
    acepto_campaña_1 = AcceptedCmp1,
    acepto_campaña_2 = AcceptedCmp2,
    acepto_campaña_3 = AcceptedCmp3,
    acepto_campaña_4 = AcceptedCmp4,
    acepto_campaña_5 = AcceptedCmp5,
    registra_quejas = Complain,
    respondio_a_campaña = Response
    
  )
```
- Variables descartadas
```{r}
data <- data |> 
  select(-c(Marital_Status, Dt_Customer, Z_CostContact, Z_Revenue, Year_Birth, ID, Education))
```



```{r}
data
```



## Buscamos valores faltantes y duplicados

```{r}
na_dup <- function(data) {
  missing_values <- colSums(is.na(data))
  missing_values_perc <- missing_values / nrow(data) * 100
  duplicated_values <- sum(duplicated(data))
  duplicated_values_perc <- duplicated_values / nrow(data) * 100
  data_types <- sapply(data, class)
  
  resumen <- data.frame(
    Valores_Faltantes  = missing_values,
    Valores_Faltantes_Porcentaje = missing_values_perc,
    Valores_Duplicados = duplicated_values,
    Valores_Duplicados_Porcentaje = duplicated_values_perc,
    Tipo_de_Variable = data_types,
    stringsAsFactors = FALSE
  )
  
  return(resumen)
}

na_dup(data)
```

-   No se identificaron valores duplicados
-   Se identificó que la columna **Ingreso** tiene valores faltantes, por lo cual se procesera a la imputacion de los datos

```{r}
data <- data |>
        mutate(Ingreso = replace(Ingreso, is.na(Ingreso), mean(Ingreso, na.rm = TRUE)))

```

Verificamos que no haya datos faltantes

```{r}
na_dup(data)
```
- Los valores faltantes fueron imputados correctamente

## convertimos a factores

```{r}
char_a_factores <- function(data) {
  data <- data |> 
    mutate(across(where(is.character), as.factor))
  return(data)
}

data <- char_a_factores(data)
str(data)

```


## Estandarizacion de datos

```{r}
data <- scale(data)
data
```






