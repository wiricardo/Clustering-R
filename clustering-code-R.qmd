---
title: "clustering-code-R"
---

# Libraries

```{r}
library(tidymodels)
library(tidyverse)
library(tidyclust)
library(rio)
library(GGally)
library(plotly)
library(cluster)
library(factoextra)
library(NbClust)
```

# Importacion y tratamiento de la data

```{r}
data <- import("marketing_campaign.csv")
```

```{r}
str(data)
```

Exploramos las variables categoricas:

```{r}
data$Education |> n_distinct()
data$Marital_Status |>  n_distinct()
data$Dt_Customer |> n_distinct()

```

```{r}
data$Education |> table()
```

```{r}
data$Marital_Status |> table()
```

```{r}
data$Dt_Customer |> table()
```

Transformamos las variables

-   Calculamos la edad

```{r}
data <- data |> 
  mutate(Edad = 2021 - Year_Birth)
```

-   Gasto total

```{r}
data <- data |> 
  mutate(Gasto_total = MntWines + MntFruits + MntMeatProducts + MntFishProducts + MntSweetProducts + MntGoldProds)
```

-   Estado civil

```{r}
data <- data |> 
  mutate(estado_civil = case_when(
    Marital_Status %in% c("Married", "Together") ~ "Casado",
    Marital_Status %in% c("Absurd", "Widow", "YOLO", "Divorced", "Single") ~ "Soltero",
    TRUE ~ Marital_Status
  ))
```

-   Cantidad de hijos

```{r}
data <- data |> 
  mutate(Cantidad_hijos = Kidhome + Teenhome)
```

-   Tamaño de la familia

```{r}
data <- data |> 
  mutate(Tamaño_Familia = case_when(
    estado_civil == "Soltero" ~ 1 + Cantidad_hijos,
    estado_civil == "Casado" ~ 2 + Cantidad_hijos
  ))
```

-   Padre de familia

```{r}
data <- data |> 
  mutate(Padre_de_Familia = ifelse(Cantidad_hijos > 0, 1, 0))
```

-   Educacion

```{r}
data <- data |> 
  mutate(Educacion = case_when(
    Education %in% c("Basic", "2n Cycle") ~ "básica",
    Education == "Graduation" ~ "Pre_grado",
    Education %in% c("Master", "PhD") ~ "Pos_grado",
    TRUE ~ Education
  ))
```

-   Cambio de nombre a columnas de interes

```{r}
data <- data |> 
  rename(
    Vinos = MntWines,
    Frutas = MntFruits,
    Carne = MntMeatProducts,
    Pescado = MntFishProducts,
    Dulces = MntSweetProducts,
    Gold = MntGoldProds,
    Ingreso = Income,
    Niño_en_casa = Kidhome,
    Adolecente_en_casa = Teenhome,
    Dias_ultima_compra = Recency,
    gasto_vinos = MntWines,
    gasto_frutas = MntFruits,
    gasto_carne = MntMeatProducts,
    gasto_pescado = MntFishProducts,
    gasto_dulces = MntSweetProducts,
    gasto_gold = MntGoldProds,
    cantidad_compra_con_descuento = NumDealsPurchases,
    cantidad_compra_web = NumWebPurchases,
    cantidad_compra_catalogo = NumCatalogPurchases,
    cantidad_compra_tienda = NumStorePurchases, 
    cantidad_visitas_web_mes = NumWebVisitsMonth, 
    acepto_campaña_1 = AcceptedCmp1,
    acepto_campaña_2 = AcceptedCmp2,
    acepto_campaña_3 = AcceptedCmp3,
    acepto_campaña_4 = AcceptedCmp4,
    acepto_campaña_5 = AcceptedCmp5,
    registra_quejas = Complain,
    respondio_a_campaña = Response
    
  )
```

-   Variables descartadas

```{r}
data <- data |> 
  select(-c(Marital_Status, Dt_Customer, Z_CostContact, Z_Revenue, Year_Birth, ID, Education))
```

```{r}
data
```

## Buscamos valores faltantes y duplicados

```{r}
na_dup <- function(data) {
  missing_values <- colSums(is.na(data))
  missing_values_perc <- missing_values / nrow(data) * 100
  duplicated_values <- sum(duplicated(data))
  duplicated_values_perc <- duplicated_values / nrow(data) * 100
  data_types <- sapply(data, class)
  
  resumen <- data.frame(
    Valores_Faltantes  = missing_values,
    Valores_Faltantes_Porcentaje = missing_values_perc,
    Valores_Duplicados = duplicated_values,
    Valores_Duplicados_Porcentaje = duplicated_values_perc,
    Tipo_de_Variable = data_types,
    stringsAsFactors = FALSE
  )
  
  return(resumen)
}

na_dup(data)
```

-   No se identificaron valores duplicados
-   Se identificó que la columna **Ingreso** tiene valores faltantes, por lo cual se procesera a la imputacion de los datos

```{r}
data <- data |>
        mutate(Ingreso = replace(Ingreso, is.na(Ingreso), mean(Ingreso, na.rm = TRUE)))

```

Verificamos que no haya datos faltantes

```{r}
na_dup(data)
```

-   Los valores faltantes fueron imputados correctamente

## convertimos a factores

```{r}
char_a_factores <- function(data) {
  data <- data |> 
    mutate(across(where(is.character), as.factor))
  return(data)
}

data <- char_a_factores(data)
str(data)

```

## deteccion de posibles outliers en la data

```{r}
detectar_outliers <- function(x, nombre_var = "") {
  Q1 <- quantile(x, 0.25, na.rm = TRUE)
  Q3 <- quantile(x, 0.75, na.rm = TRUE)
  IQR <- Q3 - Q1
  
  limite_inferior <- Q1 - 1.5 * IQR
  limite_superior <- Q3 + 1.5 * IQR
  
  outliers <- x < limite_inferior | x > limite_superior
  
  boxplot(x, main = paste("Boxplot de", nombre_var), 
          ylab = "Valor", col = "orange") 

  return(list(
    outliers = which(outliers),
    cantidad = sum(outliers),
    limites = c(inferior = limite_inferior, superior = limite_superior)
  ))
}
```

-   Variables con posibles ouliers

    -   Ingreso

```{r}
detectar_outliers(data$Ingreso, "Ingreso")
```

```         
- Edad
```

```{r}
detectar_outliers(data$Edad, "Edad")
```

```         
- gasto_vinos
```

```{r}
detectar_outliers(data$gasto_vinos, "Gasto en Vinos")
```

```         
- gasto_frutas
```

```{r}
detectar_outliers(data$gasto_frutas, "Gasto en Frutas")
```

```         
- gasto_carne
```

```{r}
detectar_outliers(data$gasto_carne, "Gasto en Carne")
```

```         
- gasto_pescado
```

```{r}
detectar_outliers(data$gasto_pescado, "Gasto en Pescado")
```

```         
- gasto_dulces
```

```{r}
detectar_outliers(data$gasto_dulces, "Gasto en Dulces")
```

```         
- gasto_gold
```

```{r}
detectar_outliers(data$gasto_gold, "Gasto en Gold")
```

```         
- gasto_total
```

```{r}
detectar_outliers(data$Gasto_total, "Gasto Total")
```

```         
- Dias_ultima_compra 
```

```{r}
detectar_outliers(data$Dias_ultima_compra, "Dias desde la última compra")
```

```         
- cantidad_compra_con_descuento
```

```{r}
detectar_outliers(data$cantidad_compra_con_descuento, "Cantidad de compra con descuento")
```

```         
- cantidad_compra_web   
```

```{r}
detectar_outliers(data$cantidad_compra_web, "Cantidad compra web")
```

```         
- cantidad_compra_catalogo
```

```{r}
detectar_outliers(data$cantidad_compra_catalogo, "Cantidad compra catalogo")
```

```         
- cantidad_compra_tienda 
```

```{r}
detectar_outliers(data$cantidad_compra_tienda, "Cantidad compra en tienda")
```

```         
- cantidad_visitas_web_mes 
```

```{r}
detectar_outliers(data$cantidad_visitas_web_mes, "Cantidad de visitas web al mes")
```

```{r}

```

## Datos seleccionados

Luego de revisar los datos, para los objetivos de la practica se seleccionaron las siguientes variables

-   Gasto total
-   Cantidad Compra total (suma de las variables cantidad compra)
-   Edad

```{r}
data <- data |> 
  mutate(Cantidad_compra_total = cantidad_compra_con_descuento + 
                                 cantidad_compra_web + 
                                 cantidad_compra_catalogo + 
                                 cantidad_compra_tienda) |>
  select(Gasto_total, Edad, Cantidad_compra_total)
```

## Eliminamos outliers

```{r}
eliminar_outliers <- function(data) {
  for (col in colnames(data)) {
    Q1 <- quantile(data[[col]], 0.25, na.rm = TRUE)
    Q3 <- quantile(data[[col]], 0.75, na.rm = TRUE)
    IQR <- Q3 - Q1
    
    data <- data |> 
      filter(data[[col]] >= Q1 - 1.5 * IQR & data[[col]] <= Q3 + 1.5 * IQR)
  }
  return(data)
}


data <- eliminar_outliers(data)
```

### Comprovamos si quedan outliers

```{r}
detectar_outliers(data$Gasto_total, "Gasto total")
detectar_outliers(data$Edad, "Edad")
detectar_outliers(data$Cantidad_compra_total, "Cantida Compra Total")
```

# Análisis exploratorio de datos

```{r}
data |>  
  ggplot(aes(x= Gasto_total, y=Cantidad_compra_total)) + 
  geom_point() 
```

```{r}
data |>  
  ggplot(aes(x= Gasto_total, y=Edad)) + 
  geom_point() 
```

```{r}
plot_ly(x = data$Gasto_total,
        y = data$Cantidad_compra_total,
        z = data$Edad,
        text = rownames(data),
        type = "scatter3d",
        mode = "markers") |> 
  layout(
    scene = list(
      xaxis = list(title = "Gasto total"),
      yaxis = list(title = "Cantidad de Compra Total"),
      zaxis = list(title = "Edad")
    )
  )
```

# Calculamos las distancias

```{r}
distancias= daisy(data, 
                  metric="gower")
```

# Determinamos el número de clusters


## Método del codo (elbow method) 
```{r}
fviz_nbclust(data, 
             hcut,                   # Método de clusterización elegido  
             diss=distancias,        # Distancias
             method = "wss",         # Método
             k.max = 10,             # Probó con 10 cluster
             verbose = F)
```

- Escogemos 3 clusters


## Método NbClust

```{r}
set.seed(2025)
res.nbclust <- NbClust(data,           # Data
                       distance = "euclidean",  # Distancia utilizada
                       min.nc = 2,              # Mínimo
                       max.nc = 5,              # Máximo
                       method = "average",      # Método
                       index ="all")            # Índices considerados
```
- Confirmamos que tenemos que usar 3 clusters











